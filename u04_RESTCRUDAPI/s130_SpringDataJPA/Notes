### Summary: Introduction to Spring Data JPA in Spring Boot

**Application Architecture Review:**
- Previously used standard JPA API.
- Now shifting to Spring Data JPA for backend DAO.

**Problem with Standard JPA:**
- Creating DAOs for multiple entities (e.g., employee, customer, product) involves repetitive code.
- Each DAO follows a similar pattern, differing mainly in entity type and primary key.

**Solution: Spring Data JPA:**
- Spring Data JPA simplifies DAO creation.
- You define an entity type and primary key, and Spring provides basic CRUD operations.

**Advantages of Spring Data JPA:**
- Reduces boilerplate code significantly (up to 70% reduction).
- Minimizes the need for custom implementation classes.

**Using Spring Data JPA:**
1. **Extend JPA Repository Interface:**
   - Example: `EmployeeRepository extends JpaRepository<Employee, Integer>`
   - No additional code needed for basic CRUD operations.
2. **Use the Repository in Application:**
   - Inject the repository into your service.
   - Call CRUD methods directly from the repository.

**Key Points:**
- No need to write `findAll`, `findById`, `save`, `deleteById` methods manually.
- The repository provides these methods out of the box.
- Simplifies the development process, making code cleaner and more maintainable.

**Advanced Features:**
- Custom queries with JPQL and Query DSL.
- Define custom methods for specific business requirements.