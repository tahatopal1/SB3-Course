In Aspect-Oriented Programming (AOP) with Spring, pointcut declarations allow you to define pointcut expressions once
and reuse them across multiple advices.
This not only reduces duplication but also makes it easier to maintain your code,
as you only need to update the pointcut expression in one place if necessary.

### Steps to Use Pointcut Declarations

1. **Create a Pointcut Declaration**:
   - Use the `@Pointcut` annotation to define a reusable pointcut expression.
   - Declare a method with no parameters and no body to serve as a reference to the pointcut expression.

   ```java
   @Aspect
   @Component
   public class DemoLoggingAspect {

       @Pointcut("execution(* com.yourpackage.dao.*.*(..))")
       private void forDaoPackage() {}
   }
   ```

   In this example, `forDaoPackage` is a method that refers to all method executions within the `com.yourpackage.dao` package.

2. **Apply the Pointcut Declaration to Advices**:
   - Use the method name from the pointcut declaration in your advices to refer to the pointcut expression.

   ```java
   @Before("forDaoPackage()")
   public void beforeAddAccountAdvice() {
       log.info("=====>>> Executing @Before advice on DAO package");
   }

   @AfterReturning("forDaoPackage()")
   public void afterReturningAdvice() {
       log.info("=====>>> Executing @AfterReturning advice on DAO package");
   }
   ```

   Here, both `beforeAddAccountAdvice` and `afterReturningAdvice` use the same pointcut expression `forDaoPackage()`.

### Benefits of Pointcut Declarations

- **Reusability**: Define the pointcut expression once and use it across multiple advices.
- **Maintainability**: Easily update the pointcut expression in a single location.
- **Combining Pointcuts**: You can combine multiple pointcuts to create more complex expressions. This allows for flexible and powerful advice application.

### Example of Combining Pointcuts

You can create more complex pointcuts by combining existing ones using logical operators such as `&&`, `||`, and `!`.

```java
@Pointcut("execution(* com.yourpackage.dao.*.*(..))")
private void forDaoPackage() {}

@Pointcut("execution(* com.yourpackage.service.*.*(..))")
private void forServicePackage() {}

@Pointcut("forDaoPackage() || forServicePackage()")
private void forDaoAndServicePackages() {}

@Before("forDaoAndServicePackages()")
public void beforeAdvice() {
    log.info("=====>>> Executing @Before advice on DAO and Service packages");
}
```

In this example, the `forDaoAndServicePackages` pointcut combines the `forDaoPackage` and `forServicePackage` pointcuts to apply advice to both packages.

By using pointcut declarations, you can significantly improve the organization and maintainability of your AOP code.
This approach allows you to focus on the logic of your application rather than the repetitive details of pointcut expressions.